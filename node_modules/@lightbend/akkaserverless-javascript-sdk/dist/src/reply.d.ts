import { Method } from 'protobufjs';
import { Metadata } from './metadata';
/**
 * @memberOf module:akkaserverless.replies
 */
declare class Effect {
    readonly method: Method;
    readonly message: any;
    readonly synchronous: boolean;
    readonly metadata: Metadata;
    /**
     * @param {protobuf.Method} method The entity service method to invoke.
     * @param {object} message The message to send to that service.
     * @param {module:akkaserverless.Metadata} [metadata] Metadata to send with the effect.
     * @param {boolean} [synchronous] Whether the effect should be execute synchronously or not, default is false
     */
    constructor(method: Method, message: any, synchronous: boolean, metadata: Metadata);
}
/**
 * A return type to allow returning forwards or failures, and attaching effects to messages.
 *
 * @memberOf module:akkaserverless.replies
 */
export declare class Reply {
    private method;
    private message;
    private metadata;
    private forward;
    private failure;
    private effects;
    constructor(method?: Method | undefined, message?: any | undefined, metadata?: Metadata | undefined, forward?: Reply | undefined, failure?: string | undefined, effects?: Effect[]);
    getMethod(): Method | undefined;
    setMethod(method: Method): Reply;
    getMessage(): any;
    setMessage(message: any): Reply;
    getMetadata(): Metadata | undefined;
    setMetadata(metadata: Metadata): Reply;
    getForward(): Reply | undefined;
    setForward(forward: Reply): Reply;
    getFailure(): string | undefined;
    setFailure(failure: string): Reply;
    getEffects(): Effect[];
    /**
     * Attach the given effect(s) to this reply
     *
     * @param {protobuf.Method} method The entity service method to invoke.
     * @param {object} message The message to send to that service.
     * @param {module:akkaserverless.Metadata} [metadata] Metadata to send with the effect.
     * @param {boolean} [synchronous] Whether the effect should be execute synchronously or not, default is false.
     * @return {module:akkaserverless.replies.Reply} This reply after adding the effect.
     */
    addEffect(method: Method, message: any, synchronous: boolean, metadata: Metadata): Reply;
    /**
     * Attach the given effect(s) to this reply
     *
     * @param {Effect[]} effects One or more service calls to execute as side effects
     * @return {module:akkaserverless.replies.Reply} This reply after adding the effects.
     */
    addEffects(effects: Effect[]): Reply;
    /**
     * Whether this reply is empty: does not have a message, forward, or failure.
     *
     * @return {boolean} Whether the reply is empty.
     */
    isEmpty(): boolean;
}
/**
 * Create a message reply.
 *
 * @param {object} message the message to reply with
 * @param {module:akkaserverless.Metadata} [metadata] Optional metadata to pass with the reply
 * @return {module:akkaserverless.replies.Reply} A message reply
 */
export declare function message(message: any, metadata: Metadata): Reply;
/**
 * @param {protobuf.Method} method The service call representing the forward.
 * @param {object} message The message to forward
 * @param {module:akkaserverless.Metadata} [metadata] Optional metadata to pass with the forwarded message
 * @return {module:akkaserverless.replies.Reply} A forward reply.
 */
export declare function forward(method: protobuf.Method, message: any, metadata: Metadata): Reply;
/**
 * @param {String} description A description of the failure
 * @return {module:akkaserverless.replies.Reply} A failure reply.
 */
export declare function failure(description: string): Reply;
/**
 * Create a reply that contains neither a message nor a forward nor a failure.
 *
 * This may be useful for emitting effects without sending a message.
 *
 * @return {module:akkaserverless.replies.Reply} An empty reply
 */
export declare function noReply(): Reply;
export {};
